import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,b as n,o as e}from"./app-B37NkK81.js";const s={};function t(p,a){return e(),l("div",null,a[0]||(a[0]=[n(`<ul><li><p>本系列博客，主要是面向Java8的虚拟机。</p></li><li><p>本系列博客主要参考<strong>尚硅谷的JVM视频教程</strong></p></li><li><p>转载请注明出处，多谢~。</p></li></ul><h3 id="_1-虚拟机概念" tabindex="-1"><a class="header-anchor" href="#_1-虚拟机概念"><span>1. 虚拟机概念</span></a></h3><ul><li><p>所谓虚拟机（Virtual Machine），就是一台虚拟的计算机。它是一款软件，用来执行一系列虚拟计算机指令。大体上，虚拟机可以分为系统虚拟机和程序虚拟机。</p><ul><li><p>大名鼎鼎的Virtual Box，VMware就属于系统虚拟机，它们完全是对物理计算机硬件的仿真(模拟)，提供了一个可运行完整操作系统的软件平台。</p></li><li><p>程序虚拟机的典型代表就是Java虚拟机，它专门为执行单个计算机程序而设计，在Java虚拟机中执行的指令我们称为Java字节码指令。</p></li></ul></li><li><p>无论是系统虚拟机还是程序虚拟机，在上面运行的软件都被限制于虚拟机提供的资源中。</p></li></ul><h3 id="_2-java虚拟机" tabindex="-1"><a class="header-anchor" href="#_2-java虚拟机"><span>2 . Java虚拟机</span></a></h3><ul><li>Java虚拟机是一台执行Java字节码的虚拟计算机，它拥有独立的运行机制，其运行的Java字节码也未必由Java语言编译而成。</li><li>JVM平台的各种语言可以共享Java虚拟机带来的跨平台性、优秀的垃圾回器，以及可靠的即时编译器。</li><li><strong>Java技术的核心就是Java虚拟机</strong>（JVM，Java Virtual Machine），因为所有的Java程序都运行在Java虚拟机内部。</li><li><strong>作用：</strong><ul><li>Java虚拟机就是二进制字节码的运行环境，负责装载字节码到其内部，解释/编译为对应平台上的机器指令执行。</li><li>每一条Java指令，Java虚拟机规范中都有详细定义，如怎么取操作数，怎么处理操作数，处理结果放在哪里。</li></ul></li><li><strong>特点：</strong><ul><li>一次编译，到处运行</li><li>自动内存管理</li><li>自动垃圾回收功能</li></ul></li></ul><h3 id="_3-jvm的整体结构" tabindex="-1"><a class="header-anchor" href="#_3-jvm的整体结构"><span>3. JVM的整体结构</span></a></h3><ol><li>HotSpot VM是目前市面上高性能虚拟机的代表作之一。</li><li>它采用解释器与即时编译器并存的架构。</li><li>在今天，Java程序的运行性能早已脱胎换骨，已经达到了可以和C/C++程序一较高下的地步。</li></ol><figure><img src="https://s21.ax1x.com/2024/05/24/pkQIFfA.jpg" alt="内存结构" tabindex="0" loading="lazy"><figcaption>内存结构</figcaption></figure><h3 id="_4-jvm的架构模型" tabindex="-1"><a class="header-anchor" href="#_4-jvm的架构模型"><span>4. JVM的架构模型</span></a></h3><p>Java编译器输入的指令流基本上是一种<strong>基于栈的指令集架构</strong>，另外一种指令集架构则是<strong>基于寄存器的指令集架构</strong>。具体来说：这两种架构之间的区别：</p><h4 id="_4-1-基于栈的指令集架构" tabindex="-1"><a class="header-anchor" href="#_4-1-基于栈的指令集架构"><span>4.1 基于栈的指令集架构</span></a></h4><p>基于栈式架构的特点：</p><ol><li>设计和实现更简单，适用于资源受限的系统；</li><li>避开了寄存器的分配难题：使用零地址指令方式分配</li><li>指令流中的指令大部分是零地址指令，其执行过程依赖于操作栈。指令集更小，编译器容易实现</li><li>不需要硬件支持，可移植性更好，更好实现跨平台</li></ol><h4 id="_4-2-基于寄存器的指令级架构" tabindex="-1"><a class="header-anchor" href="#_4-2-基于寄存器的指令级架构"><span>4.2 基于寄存器的指令级架构</span></a></h4><p>基于寄存器架构的特点：</p><ol><li>典型的应用是x86的二进制指令集：比如传统的PC以及Android的Davlik虚拟机。</li><li>指令集架构则完全依赖硬件，与硬件的耦合度高，可移植性差</li><li>性能优秀和执行更高效</li><li>花费更少的指令去完成一项操作</li><li>在大部分情况下，基于寄存器架构的指令集往往都以一地址指令、二地址指令和三地址指令为主，而基于栈式架构的指令集却是以零地址指令为主</li></ol><h4 id="_4-3-两种架构的举例" tabindex="-1"><a class="header-anchor" href="#_4-3-两种架构的举例"><span>4.3 两种架构的举例</span></a></h4><p>同样执行2+3这种逻辑操作，其指令分别如下：</p><ul><li><p><strong>基于栈的计算流程（以Java虚拟机为例）：</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>JAVA</span></span>
<span class="line"><span>iconst_2 //常量2入栈</span></span>
<span class="line"><span>istore_1</span></span>
<span class="line"><span>iconst_3 // 常量3入栈</span></span>
<span class="line"><span>istore_2</span></span>
<span class="line"><span>iload_1</span></span>
<span class="line"><span>iload_2</span></span>
<span class="line"><span>iadd //常量2/3出栈，执行相加</span></span>
<span class="line"><span>istore_0 // 结果5入栈</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>8个指令</p></li><li><p><strong>而基于寄存器的计算流程</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>JAVA</span></span>
<span class="line"><span>mov eax,2 //将eax寄存器的值设为1</span></span>
<span class="line"><span>add eax,3 //使eax寄存器的值加3</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2个指令</p></li></ul><blockquote><p>具体后面会讲</p></blockquote><h4 id="_4-4-jvm架构总结" tabindex="-1"><a class="header-anchor" href="#_4-4-jvm架构总结"><span>4.4 JVM架构总结</span></a></h4><ol><li><strong>由于跨平台性的设计，Java的指令都是根据栈来设计的</strong>。不同平台CPU架构不同，所以不能设计为基于寄存器的。栈的优点：跨平台，指令集小，编译器容易实现，缺点是性能比寄存器差一些。</li><li>时至今日，尽管嵌入式平台已经不是Java程序的主流运行平台了（准确来说应该是HotSpot VM的宿主环境已经不局限于嵌入式平台了），那么为什么不将架构更换为基于寄存器的架构呢？</li></ol><ul><li>因为基于栈的架构跨平台性好、指令集小，虽然相对于基于寄存器的架构来说，基于栈的架构编译得到的指令更多，执行性能也不如基于寄存器的架构好，但考虑到其跨平台性与移植性，我们还是选用栈的架构</li></ul><h3 id="_5-jvm的生命周期" tabindex="-1"><a class="header-anchor" href="#_5-jvm的生命周期"><span>5. JVM的生命周期</span></a></h3><h4 id="_5-1-虚拟机的启动" tabindex="-1"><a class="header-anchor" href="#_5-1-虚拟机的启动"><span>5.1 虚拟机的启动</span></a></h4><p>Java虚拟机的启动是通过引导类加载器（bootstrap class loader）创建一个初始类（initial class）来完成的，这个类是由虚拟机的具体实现指定的。</p><h4 id="_5-2-虚拟机的执行" tabindex="-1"><a class="header-anchor" href="#_5-2-虚拟机的执行"><span>5.2 虚拟机的执行</span></a></h4><ol><li>一个运行中的Java虚拟机有着一个清晰的任务：执行Java程序</li><li>程序开始执行时他才运行，程序结束时他就停止</li><li><strong>执行一个所谓的Java程序的时候，真真正正在执行的是一个叫做Java虚拟机的进程</strong></li></ol><h4 id="_5-2-虚拟机的退出" tabindex="-1"><a class="header-anchor" href="#_5-2-虚拟机的退出"><span>5.2 虚拟机的退出</span></a></h4><p><strong>有如下的几种情况：</strong></p><ol><li>程序正常执行结束</li><li>程序在执行过程中遇到了异常或错误而异常终止</li><li>由于操作系统用现错误而导致Java虚拟机进程终止</li><li>某线程调用Runtime类或System类的exit()方法，或Runtime类的halt()方法，并且Java安全管理器也允许这次exit()或halt()操作。</li><li>除此之外，JNI（Java Native Interface）规范描述了用JNI Invocation API来加载或卸载 Java虚拟机时，Java虚拟机的退出情况。</li></ol>`,31)]))}const d=i(s,[["render",t],["__file","JVM01.html.vue"]]),c=JSON.parse('{"path":"/posts/JVM01.html","title":"第一章 JVM与Java体系结构","lang":"zh-CN","frontmatter":{"title":"第一章 JVM与Java体系结构","tags":"JVM","categories":"JVM","abbrlink":2794676016,"date":"2024-05-24T17:18:51.000Z","description":"本系列博客，主要是面向Java8的虚拟机。 本系列博客主要参考尚硅谷的JVM视频教程 转载请注明出处，多谢~。 1. 虚拟机概念 所谓虚拟机（Virtual Machine），就是一台虚拟的计算机。它是一款软件，用来执行一系列虚拟计算机指令。大体上，虚拟机可以分为系统虚拟机和程序虚拟机。 大名鼎鼎的Virtual Box，VMware就属于系统虚拟机，...","gitInclude":[],"head":[["meta",{"property":"og:url","content":"https://xupan.fun/posts/JVM01.html"}],["meta",{"property":"og:site_name","content":"苏禾的博客"}],["meta",{"property":"og:title","content":"第一章 JVM与Java体系结构"}],["meta",{"property":"og:description","content":"本系列博客，主要是面向Java8的虚拟机。 本系列博客主要参考尚硅谷的JVM视频教程 转载请注明出处，多谢~。 1. 虚拟机概念 所谓虚拟机（Virtual Machine），就是一台虚拟的计算机。它是一款软件，用来执行一系列虚拟计算机指令。大体上，虚拟机可以分为系统虚拟机和程序虚拟机。 大名鼎鼎的Virtual Box，VMware就属于系统虚拟机，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://s21.ax1x.com/2024/05/24/pkQIFfA.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:published_time","content":"2024-05-24T17:18:51.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"第一章 JVM与Java体系结构\\",\\"image\\":[\\"https://s21.ax1x.com/2024/05/24/pkQIFfA.jpg\\"],\\"datePublished\\":\\"2024-05-24T17:18:51.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"苏禾\\",\\"url\\":\\"https://xupan.fun\\",\\"email\\":\\"xp0920ww@163.com\\"}]}"]]},"headers":[{"level":3,"title":"1. 虚拟机概念","slug":"_1-虚拟机概念","link":"#_1-虚拟机概念","children":[]},{"level":3,"title":"2 . Java虚拟机","slug":"_2-java虚拟机","link":"#_2-java虚拟机","children":[]},{"level":3,"title":"3.  JVM的整体结构","slug":"_3-jvm的整体结构","link":"#_3-jvm的整体结构","children":[]},{"level":3,"title":"4. JVM的架构模型","slug":"_4-jvm的架构模型","link":"#_4-jvm的架构模型","children":[]},{"level":3,"title":"5. JVM的生命周期","slug":"_5-jvm的生命周期","link":"#_5-jvm的生命周期","children":[]}],"readingTime":{"minutes":5.42,"words":1625},"filePathRelative":"posts/JVM01.md","localizedDate":"2024年5月25日","excerpt":"<ul>\\n<li>\\n<p>本系列博客，主要是面向Java8的虚拟机。</p>\\n</li>\\n<li>\\n<p>本系列博客主要参考<strong>尚硅谷的JVM视频教程</strong></p>\\n</li>\\n<li>\\n<p>转载请注明出处，多谢~。</p>\\n</li>\\n</ul>\\n<h3>1. 虚拟机概念</h3>\\n<ul>\\n<li>\\n<p>所谓虚拟机（Virtual Machine），就是一台虚拟的计算机。它是一款软件，用来执行一系列虚拟计算机指令。大体上，虚拟机可以分为系统虚拟机和程序虚拟机。</p>\\n<ul>\\n<li>\\n<p>大名鼎鼎的Virtual Box，VMware就属于系统虚拟机，它们完全是对物理计算机硬件的仿真(模拟)，提供了一个可运行完整操作系统的软件平台。</p>\\n</li>\\n<li>\\n<p>程序虚拟机的典型代表就是Java虚拟机，它专门为执行单个计算机程序而设计，在Java虚拟机中执行的指令我们称为Java字节码指令。</p>\\n</li>\\n</ul>\\n</li>\\n<li>\\n<p>无论是系统虚拟机还是程序虚拟机，在上面运行的软件都被限制于虚拟机提供的资源中。</p>\\n</li>\\n</ul>","autoDesc":true}');export{d as comp,c as data};
